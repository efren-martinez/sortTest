var users = [
 { id: "1", name: "Norah" },
 { id: "2", name: "Alyx" } ];
var accounts = [
 { account: "IRA-4679", user: "1", balance: "5175.36"},
 { account: "AAA-3571", user: "1", balance: "3106701.85"},
 { account: "AAA-4671", user: "1", balance: "138971.19"},
 { account: "ROT-1687", user: "2", balance: "2686.00"},
 { account: "AAA-7894", user: "2", balance: "68761.32"},
 { account: "IRA-6818", user: "2", balance: "564.67"},
 { account: "IRA-6819", user: "2", balance: "6564.67"}
];

function imprimir_formato(usuario, cuentas){
    let inicio = '[';
    let fin = ']';
    let cadena = '';
    let nombre_usuario = usuario.name;
    let cuentas_usuario = cuentas;
    
    for(let i = 0; i < cuentas.length; i++){
        cadena = cadena + `${nombre_usuario} | ${cuentas[i].account} | ${cuentas[i].balance}, `;
    }
    cadena = cadena.slice(0, -2);
    return `${inicio} ${cadena} ${fin}`;
}
var filterName1 = "Norah";
var filterName2 = "Alyx";

let getUserId = users.find(o => o.name == filterName1);

var userIdentifier = getUserId.id;

//Scenario A filtered by Norah with all account types (ROT, IRA, AAA)
let filtrar_cuentas = accounts.filter(function(profile) {
    return profile.user == userIdentifier;
});
let impresion = imprimir_formato(getUserId, filtrar_cuentas)
console.log(impresion);

//Scenario B filtered by account type sorted by balance ascending (change attribute vaue AAA, ROT or IRA )

let getUserIdTwo = users.find(o => o.name == filterName2);

let filtro = accounts.filter(function(profile) {
    return profile.account.includes('AAA');
});

filtro.sort((a, b) => a.balance - b.balance);

let impresionTwo = imprimir_formato(getUserIdTwo, filtro)
console.log(impresionTwo);


// Scenario C filtered by Alyx with IRA account type; sorted by balance descending

let getUserIdScenThree = users.find(o => o.name == filterName2 );
var userIdentifierScenThree = getUserIdScenThree.id;
const escenarioTres = accounts.filter(activity => (activity.account.includes("IRA") && activity.user.includes(userIdentifierScenThree)));

escenarioTres.sort((b, a) => a.balance - b.balance);

let impresionThree = imprimir_formato(getUserIdScenThree, escenarioTres)

console.log(impresionThree);


//Scenario D filtered by All users; sorted by balance ascending
function imprimir_formatoD(usuarios, cuentas){
    let inicio = '[';
    let fin = ']';
    let cadena = '';
    let nombre_usuario;
    let cuentas_usuario = cuentas;
    
    for(let i = 0; i < cuentas.length; i++){
        nombre_usuario = usuarios.find(o => o.id == cuentas[i].user);
        
        cadena = cadena + `${nombre_usuario.name} | ${cuentas[i].account} | ${cuentas[i].balance}, `;
    }
    cadena = cadena.slice(0, -2);
    return `${inicio} ${cadena} ${fin}`;
}
var allAccounts = accounts.sort((a, b) => a.balance - b.balance);
let impresionFour = imprimir_formatoD(users, allAccounts)
console.log(impresionFour);
